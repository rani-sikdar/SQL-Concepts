use new_schema;
select * from professional;
select * from PERSONAL;

## BANK HAS LAUNCHED A SCHEME TO INCREASE THE BALANCE OF THEIR CUSTOMERS BASED ON JOB CLASSIFICATION;
select CUSTOMER_ID, Job_Classification, BALANCE,
CASE
	WHEN Job_Classification = 'WHITE COLLAR' OR Job_Classification = 'BLUE COLLAR' THEN 'INCREASE BALANCE'
    WHEN Job_Classification = 'OTHER' THEN 'LET THE BAlANCE REMAIN SAME'
    END AS CASE_FLAG
    FROM professional;

select CUSTOMER_ID, Job_Classification, BALANCE,
CASE
	WHEN Job_Classification = 'WHITE COLLAR' OR Job_Classification = 'BLUE COLLAR' THEN 'INCREASE BALANCE'
    WHEN Job_Classification = 'OTHER' THEN 'LET THE BAlANCE REMAIN SAME'
    END AS CASE_FLAG,
CASE
	WHEN Job_Classification = 'WHITE COLLAR' THEN BALANCE + (BALANCE*0.10)
    WHEN Job_Classification = 'BLUE COLLAR' THEN BALANCE + (BALANCE*0.05)
    WHEN Job_Classification ='OTHER' THEN BALANCE
    END AS NEW_BALANCE
    FROM professional;
    
select CUSTOMER_ID, Job_Classification, BALANCE,
CASE
	WHEN Job_Classification = 'WHITE COLLAR' THEN  'INCREASE BALANCE'
    WHEN Job_Classification = 'BLUE COLLAR' THEN 'DECREASE BALANCE'
    WHEN Job_Classification = 'OTHER' THEN 'LET THE BAlANCE REMAIN SAME'
    END AS CASE_FLAG,
CASE
	WHEN Job_Classification = 'WHITE COLLAR' THEN BALANCE + (BALANCE*0.10)
    WHEN Job_Classification = 'BLUE COLLAR' THEN BALANCE - (BALANCE*0.05)
    WHEN Job_Classification ='OTHER' THEN BALANCE
    END AS NEW_BALANCE
    FROM professional;
    
# LEAD AND LAG FUNTION --
SELECT NAME, SURNAME, AGE, REGION, LEAD(AGE,1, "NO RECORDS") OVER(PARTITION BY REGION ORDER BY AGE) AS LEADVAL FROM PERSONAL;
SELECT NAME, SURNAME, AGE, REGION, LAG(AGE) OVER(PARTITION BY REGION ORDER BY AGE) AS LEADVAL FROM PERSONAL;

SELECT * FROM SALESDATA;

## FIND OUT GROWTH IN REVENUE FROM TODAY TO NEXT DAY FOR A BUSINESS SELLING MULTIPLE PRODUCTS 
SELECT PRODUCT ,ORDER_DATE, REVENUE ,
LEAD(REVENUE) OVER(PARTITION BY PRODUCT ORDER BY ORDER_DATE) AS NEXT_DAY_REVENUE FROM SALESDATA;

SELECT PRODUCT ,ORDER_DATE, REVENUE ,
LEAD(REVENUE) OVER(PARTITION BY PRODUCT ORDER BY ORDER_DATE) AS NEXT_DAY_REVENUE,
(LEAD(REVENUE) OVER(PARTITION BY PRODUCT ORDER BY ORDER_DATE) -REVENUE) AS REVENUE_GROWTH
FROM SALESDATA;

SELECT ORDER_ID,PRODUCT ,ORDER_DATE, QUANTITY ,
LAG(QUANTITY) OVER(PARTITION BY PRODUCT ORDER BY ORDER_DATE) AS PREVIOUS_QUANTITY FROM salesdata;

SELECT ORDER_ID,PRODUCT ,ORDER_DATE, QUANTITY ,
LAG(QUANTITY) OVER(PARTITION BY PRODUCT ORDER BY ORDER_DATE) AS PREVIOUS_QUANTITY,
QUANTITY - (LAG(QUANTITY) OVER(PARTITION BY PRODUCT ORDER BY ORDER_DATE)) AS QUANTITIY_DIFFERENCE
FROM salesdata;

#LEAD AND LAG FUNCTIONS WITH CASE STATEMENTS ---
SELECT * FROM PERSONAL;

SELECT NAME, SURNAME,REGION, AGE ,LEAD(AGE) OVER (PARTITION BY REGION ORDER BY AGE) AS NEXT_AGE,
CASE
	WHEN AGE > LEAD(AGE) OVER (PARTITION BY REGION ORDER BY AGE) THEN 'ELDER TO NEXT'
    WHEN AGE < LEAD(AGE) OVER (PARTITION BY REGION ORDER BY AGE) THEN 'YOUNGER TO NEXT'
    WHEN AGE = LEAD(AGE) OVER (PARTITION BY REGION ORDER BY AGE) THEN 'SAME AGE AS NEXT'
    ELSE 'NO RESULT'
    END AS AGE_COMPARISION
	FROM PERSONAL;
    
    
## STORED PROCEDURES
-- INPUT CALLABLE FUNCTIONS
-- OUTPUT CALLABLE FUNCTIONS
-- IN-OUT CALLABLE FUNCTIONS

/*  CREATE DEFINER=`root`@`localhost` PROCEDURE `new_procedure`()
BEGIN
SELECT * FROM PERSONAL WHERE AGE > 30;
END  */

# new_procedure CREATED UNDER 'STORED PROCEDURE'
CALL new_procedure();

/* CREATE DEFINER=`root`@`localhost` PROCEDURE `info_procedure`(IN AGE_INPUT INT)
BEGIN
SELECT * FROM PERSONAL WHERE AGE > AGE_INPUT;
END */

## INPUT STORED PRCEDURE:
CALL info_procedure(45);

/* CREATE DEFINER=`root`@`localhost` PROCEDURE `info_procedure`(OUT AGE_INFO INT)
BEGIN
SELECT COUNT(*) INTO AGE_INFO FROM PERSONAL WHERE PERSONAL.AGE > 45;
END */

## OUTPUT STORED PRCEDURE:
CALL info_procedure(@AGE_INFO);
SELECT @AGE_INFO AS COUNT_OF_AGE_GREATER_THAN_45;

/* CREATE DEFINER=`root`@`localhost` PROCEDURE `info_procedure`(INOUT AGE_INFO INT, IN AGE_INPUT INT)
BEGIN
SELECT SUM(PERSONAL.AGE) INTO AGE_INFO FROM PERSONAL WHERE PERSONAL.AGE = AGE_INPUT;
END */

## INPUT & OUTPUT STORED PRCEDURE:
CALL INFO_PROCEDURE(@AGE_INFO, 46);
SELECT @AGE_INFO AS DYNAMIC_OUTPUT_AGE;


   
    
	